name: Setup Environments

on:
  workflow_call:
    inputs:
      ci-environment:
        description: "AWS Account Name for CI Environment."
        required: true
        type: string
      devl-environment:
        description: "AWS Account Name for Development Environment."
        required: true
        type: string
      test-environment:
        description: "AWS Account Name for Test Environment."
        required: true
        type: string
      prod-environment:
        description: "AWS Account Name for Production Environment."
        required: true
        type: string
      aws-region:
        description: "AWS region where the services will be deployed."
        required: true
        type: string

    secrets:
      GH_PAT:
        description: "GitHub Personal Access Token for authentication"
        required: true

permissions:
  contents: write
  id-token: write
  actions: write
  deployments: write

jobs:
  setup-environments:
    name: Bootstrap Environments
    runs-on: ubuntu-latest

    steps:
      ## Git checkout is needed here for the workflow to run in the context of the repository.
      ## This is required to ensure that the workflow has access to the repository context.
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Add CODEOWNERS as collaborators
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          set -euo pipefail

          echo "::group::Parsing CODEOWNERS and adding collaborators"
          echo "============CODEOWNERS================"
          cat CODEOWNERS || echo "CODEOWNERS file not found, skipping collaborator addition.\n"
          echo "===================================="

          # Extract GitHub usernames and teams from CODEOWNERS
          owners=$(grep -v '^#' CODEOWNERS | awk '{$1=""; print $0}' | tr -s ' ' '\n' | grep '^@' | sort -u)

          echo "Found owners: $owners"

          for owner in $owners; do
            echo "Processing owner: $owner"
            # # Extract user or team name
            # if [[ "$owner" =~ ^@([^/]+)$ ]]; then
            #   username="${BASH_REMATCH[1]}"
            #   echo "Adding user: $username"


            #   gh api --method PUT "/repos/${GITHUB_REPOSITORY}/collaborators/$username" \
            #     -f permission='push' || echo "Failed to add $username — skipping."
            # elif [[ "$owner" =~ ^@([^/]+)/([^/]+)$ ]]; then
            #   echo "⚠️ Skipping team reference $owner — not valid in personal repos or cannot be added via API"
            # fi


            if [[ "$owner" =~ ^@([a-zA-Z0-9._-]+)$ ]]; then
              username="${BASH_REMATCH[1]}"
              echo "Adding user: $username"
              gh api --method PUT "/repos/${GITHUB_REPOSITORY}/collaborators/$username" \
                -f permission='push' || echo "Failed to add $username — skipping."
            elif [[ "$owner" =~ ^@([a-zA-Z0-9._-]+)/([a-zA-Z0-9._-]+)$ ]]; then
              org="${BASH_REMATCH[1]}"
              team="${BASH_REMATCH[2]}"
              echo "Detected team: @${org}/${team}"
              gh api --method PUT "/orgs/${org}/teams/${team}/repos/${GITHUB_REPOSITORY}" \
                -f permission="push"

              # gh api --method PUT "/repos/${GITHUB_REPOSITORY}/collaborators/$team" \
              #   -f permission='push' || echo "Failed to add $team — skipping."
            else
              echo "❌ Invalid CODEOWNERS entry: $owner"
            fi

          done

          echo "::endgroup::"

      - name: Create environments with secrets and variables
        working-directory: ${{ github.workspace }}
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          CI_ACCOUNT: ${{ inputs.ci-environment }}
          DEVL_ACCOUNT: ${{ inputs.devl-environment }}
          TEST_ACCOUNT: ${{ inputs.test-environment }}
          PROD_ACCOUNT: ${{ inputs.prod-environment }}
          AWS_ACCOUNTS: ${{ vars.AWS_ACCOUNTS }}
          AWS_OIDC_ROLE: ${{ vars.AWS_OIDC_ROLE }}
          TF_STATE_BUCKET_BASE_NAME: ${{ vars.TF_STATE_BUCKET_BASE_NAME }}
          S3_KMS_KEY_ALIAS: ${{ vars.S3_KMS_KEY_ALIAS }}
          AWS_REGION: ${{ inputs.aws-region }}  # added for simpler reuse
          ORG_SHORT_NAME: ${{ vars.ORG_SHORT_NAME }}
        run: |
          set -euo pipefail

          declare -A ENV_ACCOUNT_MAP=(
            [ci]="$CI_ACCOUNT"
            [devl]="$DEVL_ACCOUNT"
            [test]="$TEST_ACCOUNT"
            [prod]="$PROD_ACCOUNT"
          )

          declare -A ENV_NAME_MAP=(
            [ci]="devl"
            [devl]="devl"
            [test]="test"
            [prod]="prod"
          )

          echo "::group::Creating environments and setting secrets and variables"
          for env in "${!ENV_ACCOUNT_MAP[@]}"; do
            echo "::group::Processing environment: $env"
            account_name="${ENV_ACCOUNT_MAP[$env]}"
            account_id=$(echo "$AWS_ACCOUNTS" | jq -r --arg name "$account_name" '.[$name]')
            env_name="${ENV_NAME_MAP[$env]}"

            # Create environment (idempotent)
            if [ "${env}" == "ci" ]; then
              gh_env_name="$env"
            else
              gh_env_name="${ORG_SHORT_NAME}-$env-${AWS_REGION}"
            fi

            gh api --method PUT "repos/${GITHUB_REPOSITORY}/environments/$gh_env_name"
            ############## Add secrets to the environment    --- Start
            echo "::group::Adding secrets to environment: $gh_env_name"
            echo "Adding secret 'AWS Role Arn' to $gh_env_name"
            gh secret set AWS_ROLE_ARN \
              --env "$gh_env_name" \
              --body "arn:aws:iam::${account_id}:role/${AWS_OIDC_ROLE}"

            echo "Adding secret 'Terraform State S3 Bucket' to $gh_env_name"
            gh secret set TF_STATE_BUCKET_NAME \
              --env "$gh_env_name" \
              --body "${TF_STATE_BUCKET_BASE_NAME}-${account_id}-${env_name}-${AWS_REGION}"
            echo "::endgroup::"
            ############## Add secrets to the environment      -- End

            ############## Add variables to the environment    --- Start
            echo "::group::Adding variables to environment: $gh_env_name"
            gh variable set AWS_REGION \
              --env "$gh_env_name" \
              --body "${AWS_REGION}"

            gh variable set S3_KMS_KEY_ALIAS \
              --env "$gh_env_name" \
              --body "alias/${S3_KMS_KEY_ALIAS}"

            gh variable set TF_STATE_BUCKET_NAME \
              --env "$gh_env_name" \
              --body "${TF_STATE_BUCKET_BASE_NAME}-${account_id}-${env_name}-${AWS_REGION}"

            gh variable set AWS_ROLE_ARN \
              --env "$gh_env_name" \
              --body "arn:aws:iam::${account_id}:role/${AWS_OIDC_ROLE}"
            echo "::endgroup::"
            ############## Add variables to the environment   --- End
            echo "::endgroup::"
          done
          echo "::endgroup::"
